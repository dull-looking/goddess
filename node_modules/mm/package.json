{
  "_args": [
    [
      {
        "raw": "mm@^2.1.0",
        "scope": null,
        "escapedName": "mm",
        "name": "mm",
        "rawSpec": "^2.1.0",
        "spec": ">=2.1.0 <3.0.0",
        "type": "range"
      },
      "/Applications/邓肯21/FE/egg-example/node_modules/egg-mock"
    ]
  ],
  "_cnpm_publish_time": 1485283576748,
  "_from": "mm@^2.1.0",
  "_hasShrinkwrap": false,
  "_id": "mm@2.1.0",
  "_location": "/mm",
  "_nodeVersion": "6.9.4",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/mm-2.1.0.tgz_1485283576501_0.8919401252642274"
  },
  "_npmUser": {
    "name": "fengmk2",
    "email": "fengmk2@gmail.com"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "mm@^2.1.0",
    "scope": null,
    "escapedName": "mm",
    "name": "mm",
    "rawSpec": "^2.1.0",
    "spec": ">=2.1.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/egg-mock"
  ],
  "_resolved": "http://registry.npm.taobao.org/mm/download/mm-2.1.0.tgz",
  "_shasum": "722f0b0756f5e10106073cfcd647072ef7b17246",
  "_shrinkwrap": null,
  "_spec": "mm@^2.1.0",
  "_where": "/Applications/邓肯21/FE/egg-example/node_modules/egg-mock",
  "author": {
    "name": "fengmk2",
    "email": "fengmk2@gmail.com",
    "url": "http://fengmk2.com"
  },
  "bugs": {
    "url": "https://github.com/node-modules/mm/issues"
  },
  "ci": {
    "version": "4, 6, 7"
  },
  "contributors": [
    {
      "name": "fengmk2",
      "email": "fengmk2@gmail.com",
      "url": "https://github.com/fengmk2"
    },
    {
      "name": "dead_horse",
      "email": "dead_horse@qq.com",
      "url": "https://github.com/dead-horse"
    },
    {
      "name": "AlsoTang",
      "email": "alsotang@gmail.com",
      "url": "https://github.com/alsotang"
    },
    {
      "name": "Haoliang Gao",
      "email": "sakura9515@gmail.com",
      "url": "https://github.com/popomore"
    },
    {
      "name": "xavierzhou",
      "email": "xiayezhou@gmail.com",
      "url": "https://github.com/xavierchow"
    }
  ],
  "dependencies": {
    "is-type-of": "^1.0.0",
    "ko-sleep": "^1.0.2",
    "muk-prop": "^0.5.3",
    "semver": "^5.3.0",
    "thenify": "^3.2.1"
  },
  "description": "mock mate, mock http request, fs access and so on.",
  "devDependencies": {
    "autod": "2",
    "chunkstream": "^0.0.1",
    "co": "^4.6.0",
    "egg-bin": "^2.0.1",
    "egg-ci": "^1.1.0",
    "eslint": "3",
    "eslint-config-egg": "3",
    "node-patch": "*",
    "pedding": "^1.1.0",
    "should": "^11.1.2",
    "thunkify-wrap": "^1.0.4",
    "urllib": "^2.19.0"
  },
  "directories": {},
  "dist": {
    "shasum": "722f0b0756f5e10106073cfcd647072ef7b17246",
    "size": 6853,
    "noattachment": false,
    "tarball": "http://registry.npm.taobao.org/mm/download/mm-2.1.0.tgz"
  },
  "engines": {
    "node": ">=4.0.0"
  },
  "files": [
    "lib",
    "index.js"
  ],
  "gitHead": "8a79bbeb0ffafbc06b812cb13096d098d660d959",
  "homepage": "http://github.com/node-modules/mm",
  "keywords": [
    "mm",
    "muk",
    "mock",
    "test"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "dead_horse",
      "email": "dead_horse@qq.com"
    },
    {
      "name": "fengmk2",
      "email": "fengmk2@gmail.com"
    },
    {
      "name": "popomore",
      "email": "sakura9515@gmail.com"
    }
  ],
  "name": "mm",
  "optionalDependencies": {},
  "publish_time": 1485283576748,
  "readme": "mm\n=======\n\n[![NPM version][npm-image]][npm-url]\n[![build status][travis-image]][travis-url]\n[![Test coverage][codecov-image]][codecov-url]\n[![David deps][david-image]][david-url]\n[![npm download][download-image]][download-url]\n\n[npm-image]: https://img.shields.io/npm/v/mm.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/mm\n[travis-image]: https://img.shields.io/travis/node-modules/mm.svg?style=flat-square\n[travis-url]: https://travis-ci.org/node-modules/mm\n[codecov-image]: https://codecov.io/github/node-modules/mm/coverage.svg?branch=master\n[codecov-url]: https://codecov.io/github/node-modules/mm?branch=master\n[david-image]: https://img.shields.io/david/node-modules/mm.svg?style=flat-square\n[david-url]: https://david-dm.org/node-modules/mm\n[download-image]: https://img.shields.io/npm/dm/mm.svg?style=flat-square\n[download-url]: https://npmjs.org/package/mm\n\nAn simple but flexible **mock(or say stub)** package, mock mate.\n\n__mm@2 only support node v4.0+.__\n\n## Install\n\n```bash\n$ npm install mm --save-dev\n```\n\n## Usage\n\n```js\nvar mm = require('mm');\nvar fs = require('fs');\n\nmm(fs, 'readFileSync', function(filename) {\n  return filename + ' content';\n});\n\nconsole.log(fs.readFileSync('《九评 Java》'));\n// => 《九评 Java》 content\n\nmm.restore();\n\nconsole.log(fs.readFileSync('《九评 Java》'));\n// => throw `Error: ENOENT, no such file or directory '《九评 Java》`\n```\n\n### Support generator function\n\n```js\nvar foo = {\n  get: function* () {\n    return 1;\n  }\n};\n\nmm.data(foo, 'get', 2);\nvar data = yield* foo.get(); // data should return 2\n\nmm.error(foo, 'get', 'error boom');\nyield* foo.get(); // should throw error\n```\n\n## API\n\n### .error(module, propertyName, errerMessage, errorProperties)\n\n```js\nvar mm = require('mm');\nvar fs = require('fs');\n\nmm.error(fs, 'readFile', 'mock fs.readFile return error');\n\nfs.readFile('/etc/hosts', 'utf8', function (err, content) {\n  // err.name === 'MockError'\n  // err.message === 'mock fs.readFile return error'\n  console.log(err);\n\n  mm.restore(); // remove all mock effects.\n\n  fs.readFile('/etc/hosts', 'utf8', function (err, content) {\n    console.log(err); // => null\n    console.log(content); // => your hosts\n  });\n});\n```\n\n### .data(module, propertyName, secondCallbackArg)\n\n```js\nmm.data(fs, 'readFile', new Buffer('some content'));\n\n// equals\n\nfs.readFile = function (args..., callback) {\n  callback(null, new Buffer('some content'))\n};\n```\n\n### .empty(module, propertyName)\n\n```js\nmm.empty(mysql, 'query');\n\n// equals\n\nmysql.query = function (args..., callback) {\n  callback();\n}\n```\n\n### .datas(module, propertyName, argsArray)\n\n```js\nmm.datas(urllib, 'request', [new Buffer('data'), {headers: { foo: 'bar' }}]);\n\n// equals\n\nurllib.request = function (args..., callback) {\n  callback(null, new Buffer('data'), {headers: { foo: 'bar' }});\n}\n```\n\n### .syncError(module, propertyName, errerMessage, errorProperties)\n\n```js\nvar mm = require('mm');\nvar fs = require('fs');\n\nmm.syncError(fs, 'readFileSync', 'mock fs.readFile return error', {code: 'ENOENT'});\n\n// equals\n\nfs.readFileSync = function (args...) {\n  var err = new Error('mock fs.readFile return error');\n  err.code = 'ENOENT';\n  throw err;\n};\n\n```\n\n### .syncData(module, propertyName, value)\n\n```js\nmm.syncData(fs, 'readFileSync', new Buffer('some content'));\n\n// equals\n\nfs.readFileSync = function (args...) {\n  return new Buffer('some content');\n};\n```\n\n## .syncEmpty\n\n```js\nmm.syncEmpty(fs, 'readFileSync');\n\n// equals\n\nfs.readFileSync = function (args...) {\n  return;\n}\n```\n\n### .restore()\n\n```js\n// restore all mock properties\nmm.restore();\n```\n\n### .http.request(mockUrl, mockResData, mockResHeaders) and .https.request(mockUrl, mockResData, mockResHeaders)\n\n```js\nvar mm = require('mm');\nvar http = require('http');\n\nvar mockURL = '/foo';\nvar mockResData = 'mock data';\nvar mockResHeaders = { server: 'mock server' };\nmm.http.request(mockURL, mockResData, mockResHeaders);\nmm.https.request(mockURL, mockResData, mockResHeaders);\n\n// http\nhttp.get({\n  path: '/foo'\n}, function (res) {\n  console.log(res.headers); // should be mock headers\n  var body = '';\n  res.on('data', function (chunk) {\n    body += chunk.toString();\n  });\n  res.on('end', function () {\n    console.log(body); // should equal 'mock data'\n  });\n});\n\n// https\nhttps.get({\n  path: '/foo'\n}, function (res) {\n  console.log(res.headers); // should be mock headers\n  var body = '';\n  res.on('data', function (chunk) {\n    body += chunk.toString();\n  });\n  res.on('end', function () {\n    console.log(body); // should equal 'mock data'\n  });\n});\n```\n\n### .http.requestError(mockUrl, reqError, resError)\n\n```js\nvar mm = require('mm');\nvar http = require('http');\n\nvar mockURL = '/foo';\nvar reqError = null;\nvar resError = 'mock res error';\nmm.http.requestError(mockURL, reqError, resError);\n\nvar req = http.get({\n  path: '/foo'\n}, function (res) {\n  console.log(res.statusCode, res.headers); // 200 but never emit `end` event\n  res.on('end', fucntion () {\n    console.log('never show this message');\n  });\n});\nreq.on('error', function (err) {\n  console.log(err); // should return mock err: err.name === 'MockHttpResponseError'\n}\n```\n\n## License\n\n```\nThis software is licensed under the MIT License.\n\nCopyright (C) 2012 - 2014 fengmk2 <fengmk2@gmail.com>\nCopyright (C) 2015 - 2016 node-modules\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/node-modules/mm.git"
  },
  "scripts": {
    "autod": "autod -w --prefix '^'",
    "ci": "npm run lint && egg-bin cov",
    "lint": "eslint --fix lib test index.js",
    "test": "npm run lint && egg-bin test"
  },
  "version": "2.1.0"
}
