{
  "_args": [
    [
      {
        "raw": "sdk-base@^3.1.1",
        "scope": null,
        "escapedName": "sdk-base",
        "name": "sdk-base",
        "rawSpec": "^3.1.1",
        "spec": ">=3.1.1 <4.0.0",
        "type": "range"
      },
      "/Applications/邓肯21/FE/egg-example/node_modules/cluster-client"
    ]
  ],
  "_cnpm_publish_time": 1489465105472,
  "_from": "sdk-base@^3.1.1",
  "_hasShrinkwrap": false,
  "_id": "sdk-base@3.1.1",
  "_location": "/sdk-base",
  "_nodeVersion": "7.7.1",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/sdk-base-3.1.1.tgz_1489465105246_0.4228855238761753"
  },
  "_npmUser": {
    "name": "fengmk2",
    "email": "fengmk2@gmail.com"
  },
  "_npmVersion": "4.1.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "sdk-base@^3.1.1",
    "scope": null,
    "escapedName": "sdk-base",
    "name": "sdk-base",
    "rawSpec": "^3.1.1",
    "spec": ">=3.1.1 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/cluster-client",
    "/egg-watcher",
    "/tcp-base"
  ],
  "_resolved": "http://registry.npm.taobao.org/sdk-base/download/sdk-base-3.1.1.tgz",
  "_shasum": "8f06f53215281a17519b8ea8b2799268cddb234d",
  "_shrinkwrap": null,
  "_spec": "sdk-base@^3.1.1",
  "_where": "/Applications/邓肯21/FE/egg-example/node_modules/cluster-client",
  "author": {
    "name": "dead_horse",
    "email": "dead_horse@qq.com",
    "url": "http://deadhorse.me"
  },
  "bugs": {
    "url": "https://github.com/node-modules/sdk-base/issues"
  },
  "ci": {
    "version": "6, 7"
  },
  "dependencies": {
    "await-event": "^2.0.0",
    "co": "^4.6.0",
    "is-type-of": "^1.0.0"
  },
  "description": "a base class for sdk with default error handler",
  "devDependencies": {
    "autod": "^2.7.1",
    "egg-bin": "^2.4.0",
    "egg-ci": "^1.5.0",
    "eslint": "^3.17.1",
    "eslint-config-egg": "^3.2.0",
    "pedding": "^1.1.0"
  },
  "directories": {},
  "dist": {
    "shasum": "8f06f53215281a17519b8ea8b2799268cddb234d",
    "size": 4157,
    "noattachment": false,
    "tarball": "http://registry.npm.taobao.org/sdk-base/download/sdk-base-3.1.1.tgz"
  },
  "engine": {
    "node": ">= 6.0.0"
  },
  "files": [
    "index.js"
  ],
  "gitHead": "d059aaca01a04fb64805c50fc07777735e15aa57",
  "homepage": "https://github.com/node-modules/sdk-base#readme",
  "keywords": [
    "sdk",
    "error"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "dead_horse",
      "email": "dead_horse@qq.com"
    },
    {
      "name": "fengmk2",
      "email": "fengmk2@gmail.com"
    },
    {
      "name": "gxcsoccer",
      "email": "gxcsoccer@126.com"
    },
    {
      "name": "popomore",
      "email": "sakura9515@gmail.com"
    }
  ],
  "name": "sdk-base",
  "optionalDependencies": {},
  "publish_time": 1489465105472,
  "readme": "sdk-base\n---------------\n\n[![NPM version][npm-image]][npm-url]\n[![build status][travis-image]][travis-url]\n[![Test coverage][coveralls-image]][coveralls-url]\n[![Gittip][gittip-image]][gittip-url]\n[![David deps][david-image]][david-url]\n[![npm download][download-image]][download-url]\n\n[npm-image]: https://img.shields.io/npm/v/sdk-base.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/sdk-base\n[travis-image]: https://img.shields.io/travis/node-modules/sdk-base.svg?style=flat-square\n[travis-url]: https://travis-ci.org/node-modules/sdk-base\n[coveralls-image]: https://img.shields.io/coveralls/node-modules/sdk-base.svg?style=flat-square\n[coveralls-url]: https://coveralls.io/r/node-modules/sdk-base?branch=master\n[gittip-image]: https://img.shields.io/gittip/dead-horse.svg?style=flat-square\n[gittip-url]: https://www.gittip.com/dead-horse/\n[david-image]: https://img.shields.io/david/node-modules/sdk-base.svg?style=flat-square\n[david-url]: https://david-dm.org/node-modules/sdk-base\n[download-image]: https://img.shields.io/npm/dm/sdk-base.svg?style=flat-square\n[download-url]: https://npmjs.org/package/sdk-base\n\n\nA base class for sdk with some common & useful functions.\n\n## Installation\n\n```bash\n$ npm install sdk-base\n```\n\n## Usage\n\nConstructor argument:\n- {Object} options\n  - {String} [initMethod] - the async init method name, the method should be a generator function. If set, will execute the function in the constructor.\n\n  ```js\n  'use strict';\n\n  const co = require('co');\n  const Base = require('sdk-base');\n\n  class Client extends Base {\n    constructor() {\n      super({\n        initMethod: 'init',\n      });\n    }\n\n    * init() {\n      // put your async init logic here\n    }\n  }\n\n  co(function* () {\n    const client = new Client();\n    // wait client ready, if init failed, client will throw an error.\n    yield client.ready();\n\n    // support generator event listener\n    client.on('data', function* (data) {\n      // put your async process logic here\n      //\n      // @example\n      // ----------\n      // yield submit(data);\n    });\n\n    client.emit('data', { foo: 'bar' });\n\n  }).catch(err => { console.error(err); });\n  ```\n\n### API\n\n- `.ready(flagOrFunction)` flagOrFunction is optional, and the argument type can be Boolean, Error or Function.\n\n  ```js\n  // init ready\n  client.ready(true);\n  // init failed\n  client.ready(new Error('init failed'));\n\n  // listen client ready\n  client.ready(err => {\n    if (err) {\n      console.log('client init failed');\n      console.error(err);\n      return;\n    }\n    console.log('client is ready');\n  });\n\n  // support promise style call\n  client.ready()\n    .then(() => { ... })\n    .catch(err => { ... });\n\n  // support generator style call\n  yield client.ready();\n  ```\n\n- `.on(event, listener)` wrap the [EventEmitter.prototype.on(event, listener)](https://nodejs.org/api/events.html#events_emitter_on_eventname_listener), the only difference is to support adding generator listener on events, except 'error' event.\n- `once(event, listener)` wrap the [EventEmitter.prototype.once(event, listener)](https://nodejs.org/api/events.html#events_emitter_once_eventname_listener), the only difference is to support adding generator listener on events, except 'error' event.\n- `prependListener(event, listener)` wrap the [EventEmitter.prototype.prependListener(event, listener)](https://nodejs.org/api/events.html#events_emitter_prependlistener_eventname_listener), the only difference is to support adding generator listener on events, except 'error' event.\n- `prependOnceListener(event, listener)` wrap the [EventEmitter.prototype.prependOnceListener(event, listener)](https://nodejs.org/api/events.html#events_emitter_prependoncelistener_eventname_listener), the only difference is to support adding generator listener on events, except 'error' event.\n- `addListener(event, listener)` wrap the [EventEmitter.prototype.addListener(event, listener)](https://nodejs.org/api/events.html#events_emitter_addlistener_eventname_listener), the only difference is to support adding generator listener on events, except 'error' event.\n\n  ```js\n  client.on('data', function* (data) {\n    // your async process logic here\n  });\n  client.once('foo', function* (bar) {\n    // ...\n  });\n\n  // listen error event\n  client.on('error', function(err) {\n    console.error(err.stack);\n  });\n  ```\n\n- `.await(event)`: [await an event](https://github.com/cojs/await-event), return a promise, and it will resolve(reject if event is `error`) once this event emmited.\n\n  ```js\n  co(function* () {\n    const data = yield client.await('data');\n  });\n  ```\n\n### License\n\n[MIT](LICENSE)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/node-modules/sdk-base.git"
  },
  "scripts": {
    "autod": "autod",
    "ci": "npm run lint && npm run cov",
    "cov": "egg-bin cov",
    "lint": "eslint --ext .js .",
    "test": "npm run lint && npm run test-local",
    "test-local": "egg-bin test"
  },
  "version": "3.1.1"
}
