{
  "_args": [
    [
      {
        "raw": "cluster-client@^1.6.4",
        "scope": null,
        "escapedName": "cluster-client",
        "name": "cluster-client",
        "rawSpec": "^1.6.4",
        "spec": ">=1.6.4 <2.0.0",
        "type": "range"
      },
      "/Applications/邓肯21/FE/egg-example/node_modules/egg"
    ]
  ],
  "_cnpm_publish_time": 1494255069035,
  "_from": "cluster-client@^1.6.4",
  "_hasShrinkwrap": false,
  "_id": "cluster-client@1.6.4",
  "_location": "/cluster-client",
  "_nodeVersion": "7.10.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/cluster-client-1.6.4.tgz_1494255066447_0.25257307197898626"
  },
  "_npmUser": {
    "name": "fengmk2",
    "email": "fengmk2@gmail.com"
  },
  "_npmVersion": "4.2.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "cluster-client@^1.6.4",
    "scope": null,
    "escapedName": "cluster-client",
    "name": "cluster-client",
    "rawSpec": "^1.6.4",
    "spec": ">=1.6.4 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/egg"
  ],
  "_resolved": "http://registry.npm.taobao.org/cluster-client/download/cluster-client-1.6.4.tgz",
  "_shasum": "e21de9aa4bf1e1f5815c2b3f532646a1b3095c57",
  "_shrinkwrap": null,
  "_spec": "cluster-client@^1.6.4",
  "_where": "/Applications/邓肯21/FE/egg-example/node_modules/egg",
  "author": {
    "name": "gxcsoccer@126.com"
  },
  "bugs": {
    "url": "https://github.com/node-modules/cluster-client/issues"
  },
  "ci": {
    "version": "6, 7"
  },
  "contributors": [
    {
      "name": "zōng yǔ",
      "email": "gxcsoccer@users.noreply.github.com"
    },
    {
      "name": "xiaochen.gaoxc",
      "email": "xiaochen.gaoxc@alibaba-inc.com"
    },
    {
      "name": "zōng yǔ",
      "email": "gxcsoccer@126.com",
      "url": "https://github.com/gxcsoccer"
    },
    {
      "name": "hui",
      "email": "kangpangpang@gmail.com",
      "url": "https://github.com/leoner"
    },
    {
      "name": "Shawn",
      "email": "shaoshuai0102@gmail.com",
      "url": "https://github.com/shaoshuai0102"
    },
    {
      "name": "fengmk2",
      "email": "fengmk2@gmail.com",
      "url": "https://github.com/fengmk2"
    },
    {
      "name": "ali-sdk",
      "email": "m@fengmk2.com",
      "url": "https://github.com/ali-sdk"
    }
  ],
  "dependencies": {
    "byte": "^1.1.5",
    "co": "^4.6.0",
    "debug": "^2.6.6",
    "egg-logger": "^1.6.0",
    "is-type-of": "^1.0.0",
    "json-stringify-safe": "^5.0.1",
    "long": "^3.2.0",
    "sdk-base": "^3.1.1",
    "serialize-json": "^1.0.1",
    "tcp-base": "^3.0.0",
    "utility": "^1.12.0"
  },
  "description": "Sharing Connection among Multi-Process Nodejs",
  "devDependencies": {
    "address": "^1.0.1",
    "autod": "^2.8.0",
    "coffee": "^3.3.0",
    "contributors": "^0.5.1",
    "egg": "^1.2.1",
    "egg-bin": "^3.3.2",
    "egg-ci": "^1.6.0",
    "egg-mock": "^3.5.0",
    "eslint": "^3.19.0",
    "eslint-config-egg": "^3.2.0",
    "mm": "^2.1.0",
    "pedding": "^1.1.0",
    "spy": "^1.0.0",
    "supertest": "^3.0.0"
  },
  "directories": {},
  "dist": {
    "shasum": "e21de9aa4bf1e1f5815c2b3f532646a1b3095c57",
    "size": 17551,
    "noattachment": false,
    "tarball": "http://registry.npm.taobao.org/cluster-client/download/cluster-client-1.6.4.tgz"
  },
  "engines": {
    "node": ">= 6.0.0"
  },
  "files": [
    "lib"
  ],
  "gitHead": "e272e31f3923a70f2ca0e005079eefaae7011de2",
  "homepage": "https://github.com/node-modules/cluster-client#readme",
  "keywords": [
    "cluster",
    "multi-process"
  ],
  "license": "MIT",
  "main": "./index.js",
  "maintainers": [
    {
      "name": "fengmk2",
      "email": "fengmk2@gmail.com"
    },
    {
      "name": "gxcsoccer",
      "email": "gxcsoccer@126.com"
    },
    {
      "name": "kangpangpang",
      "email": "kangpangpang@gmail.com"
    },
    {
      "name": "popomore",
      "email": "sakura9515@gmail.com"
    },
    {
      "name": "shaoshuai0102",
      "email": "shaoshuai0102@gmail.com"
    }
  ],
  "name": "cluster-client",
  "optionalDependencies": {},
  "publish_time": 1494255069035,
  "readme": "# cluster-client\nSharing Connection among Multi-Process Nodejs\n\n[![NPM version][npm-image]][npm-url]\n[![build status][travis-image]][travis-url]\n[![Test coverage][codecov-image]][codecov-url]\n[![David deps][david-image]][david-url]\n[![Known Vulnerabilities][snyk-image]][snyk-url]\n[![npm download][download-image]][download-url]\n\n[npm-image]: https://img.shields.io/npm/v/cluster-client.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/cluster-client\n[travis-image]: https://img.shields.io/travis/node-modules/cluster-client.svg?style=flat-square\n[travis-url]: https://travis-ci.org/node-modules/cluster-client\n[codecov-image]: https://codecov.io/gh/node-modules/cluster-client/branch/master/graph/badge.svg\n[codecov-url]: https://codecov.io/gh/node-modules/cluster-client\n[david-image]: https://img.shields.io/david/node-modules/cluster-client.svg?style=flat-square\n[david-url]: https://david-dm.org/node-modules/cluster-client\n[snyk-image]: https://snyk.io/test/npm/cluster-client/badge.svg?style=flat-square\n[snyk-url]: https://snyk.io/test/npm/cluster-client\n[download-image]: https://img.shields.io/npm/dm/cluster-client.svg?style=flat-square\n[download-url]: https://npmjs.org/package/cluster-client\n\nAs we know, each Node.js process runs in a single thread. Usually, we split a single process into multiple processes to take advantage of multi-core systems. On the other hand, it brings more system overhead, sush as maintaining more TCP connections between servers.\n\nThis module is designed to share connections among multi-process Nodejs.\n\n## Theory\n\n- Inspired by [Leader/Follower pattern](http://www.cs.wustl.edu/~schmidt/PDF/lf.pdf).\n- Allow ONLY one process \"the Leader\" to communicate with server. Other processes \"the Followers\" act as \"Proxy\" client, and forward all requests to Leader.\n- The Leader is selected by \"Port Competition\". Every process try to listen on a certain port (for example 7777), but ONLY one can occupy the port, then it becomes the Leader, the others become Followers.\n- TCP socket connections are maintained between Leader and Followers. And I design a simple communication protocol to exchange data between them.\n- If old Leader dies, one of processes will be selected as the new Leader.\n\n## Diagram\n\nnormal (without using cluster client)\n```js\n+--------+   +--------+\n| Client |   | Client |   ...\n+--------+   +--------+\n    |  \\     /   |\n    |    \\ /     |\n    |    / \\     |\n    |  /     \\   |\n+--------+   +--------+\n| Server |   | Server |   ...\n+--------+   +--------+\n\n```\n\nusing cluster-client\n```js\n             +-------+\n             | start |\n             +---+---+\n                 |\n        +--------+---------+\n      __| port competition |__\nwin /   +------------------+  \\ lose\n   /                           \\\n+--------+     tcp conn     +----------+\n| Leader |<---------------->| Follower |\n+--------+                  +----------+\n    |\n+--------+\n| Client |\n+--------+\n    |  \\\n    |    \\\n    |      \\\n    |        \\\n+--------+   +--------+\n| Server |   | Server |   ...\n+--------+   +--------+\n\n```\n\n## Protocol\n\n- Packet structure\n```js\n 0       1       2               4                                                              12\n +-------+-------+---------------+---------------------------------------------------------------+\n |version|req/res|    reserved   |                          request id                           |\n +-------------------------------+-------------------------------+-------------------------------+\n |           timeout             |   connection object length    |   application object length   |\n +-------------------------------+---------------------------------------------------------------+\n |         conn object (JSON format)  ...                    |            app object             |\n +-----------------------------------------------------------+                                   |\n |                                          ...                                                  |\n +-----------------------------------------------------------------------------------------------+\n```\n- Protocol Type\n  - Register Channel\n  - Subscribe/Publish\n  - Invoke\n- Sequence diagram\n\n```js\n +----------+             +---------------+          +---------+\n | Follower |             |  local server |          |  Leader |\n +----------+             +---------------+          +---------+\n      |     register channel     |       assign to        |\n      + -----------------------> |  --------------------> |\n      |                          |                        |\n      |                                subscribe          |\n      + ------------------------------------------------> |\n      |       subscribe result                            |\n      | <------------------------------------------------ +\n      |                                                   |\n      |                                 invoke            |\n      + ------------------------------------------------> |\n      |          invoke result                            |\n      | <------------------------------------------------ +\n      |                                                   |\n```\n\n## Install\n\n```bash\n$ npm install cluster-client --save\n```\n\nNode.js >= 6.0.0 required\n\n## Usage\n\n```js\n'use strict';\n\nconst co = require('co');\nconst Base = require('sdk-base');\nconst cluster = require('cluster-client');\n\n/**\n * Client Example\n */\nclass YourClient extends Base {\n  constructor(options) {\n    super(options);\n\n    this.options = options;\n    this.ready(true);\n  }\n\n  subscribe(reg, listener) {\n    // subscribe logic\n  }\n\n  publish(reg) {\n    // publish logic\n  }\n\n  * getData(id) {\n    // invoke api\n  }\n\n  getDataCallback(id, cb) {\n    // ...\n  }\n\n  getDataPromise(id) {\n    // ...\n  }\n}\n\n// create some client instances, but only one instance will connect to server\nconst client_1 = cluster(YourClient)\n  .delegate('getData')\n  .delegate('getDataCallback')\n  .delegate('getDataPromise')\n  .create({ foo: 'bar' });\nconst client_2 = cluster(YourClient)\n  .delegate('getData')\n  .delegate('getDataCallback')\n  .delegate('getDataPromise')\n  .create({ foo: 'bar' });\nconst client_3 = cluster(YourClient)\n  .delegate('getData')\n  .delegate('getDataCallback')\n  .delegate('getDataPromise')\n  .create({ foo: 'bar' });\n\n// subscribe information\nclient_1.subscribe('some thing', result => console.log(result));\nclient_2.subscribe('some thing', result => console.log(result));\nclient_3.subscribe('some thing', result => console.log(result));\n\n// publish data\nclient_2.publish('some data');\n\n// invoke method\nclient_3.getDataCallback('some thing', (err, val) => console.log(val));\nclient_2.getDataPromise('some thing').then(val => console.log(val));\n\nco(function*() {\n  const ret = yield client_1.getData('some thing');\n  console.log(ret);\n}).catch(err => console.error(err));\n```\n\n## API\n\n- `delegate(from, to)`:\n  create delegate method, `from` is the method name your want to create, and `to` have 6 possible values: [ `subscribe`, `unSubscribe`, `publish`, `invoke`, `invokeOneway`, `close` ],  and the default value is invoke\n- `override(name, value)`:\n  override one property\n- `create(…)`\n  create the client instance\n- `close(client)`\n  close the client\n- `APIClientBase`  a base class to help you create your api client\n\n## Best Practice\n\n1. DataClient\n  - Only provider data API, interact with server and maintain persistent connections etc.\n  - No need to concern `cluster` issue\n2. APIClient\n  - Using `cluster-client` to wrap DataClient\n  - Put your bussiness logic here\n\n**DataClient**\n```js\nconst Base = require('sdk-base');\n\nclass DataClient extends Base {\n  constructor(options) {\n    super(options);\n    this.ready(true);\n  }\n\n  subscribe(info, listener) {\n    // subscribe data from server\n  }\n\n  publish(info) {\n    // publish data to server\n  }\n\n  * getData(id) {\n    // asynchronous API\n  }\n}\n```\n\n**APIClient**\n```js\nconst DataClient = require('./your-data-client');\nconst { APIClientBase } = require('cluster-client');\n\nclass APIClient extends APIClientBase {\n  constructor(options) {\n    super(options);\n    this._cache = new Map();\n  }\n  get DataClient() {\n    return DataClient;\n  }\n  get delegates() {\n    return {\n      getData: 'invoke',\n    };\n  }\n  get clusterOptions() {\n    return {\n      name: 'MyClient',\n    };\n  }\n  subscribe(...args) {\n    return this._client.subscribe(...args);\n  }\n  publish(...args) {\n    return this._client.publish(...args);\n  }\n  * getData(id) {\n    // write your business logic & use data client API\n    if (this._cache.has(id)) {\n      return this._cache.get(id);\n    }\n    const data = yield this._client.getData(id);\n    this._cache.set(id, data);\n    return datal\n  }\n}\n```\n\n```js\n|------------------------------------------------|\n| APIClient                                      |\n|       |----------------------------------------|\n|       | ClusterClient                          |\n|       |      |---------------------------------|\n|       |      | DataClient                      |\n|-------|------|---------------------------------|\n```\n\nFor more information, you can refer to the [discussion](https://github.com/eggjs/egg/issues/322)\n\n[MIT](LICENSE)",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/node-modules/cluster-client.git"
  },
  "scripts": {
    "autod": "autod",
    "ci": "npm run lint && npm run cov",
    "contributors": "contributors -f plain -o AUTHORS",
    "cov": "egg-bin cov",
    "lint": "eslint . --ext .js --fix",
    "test": "npm run lint && npm run test-local",
    "test-local": "egg-bin test"
  },
  "version": "1.6.4"
}
