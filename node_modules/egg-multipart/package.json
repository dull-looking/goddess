{
  "_args": [
    [
      {
        "raw": "egg-multipart@^1.4.0",
        "scope": null,
        "escapedName": "egg-multipart",
        "name": "egg-multipart",
        "rawSpec": "^1.4.0",
        "spec": ">=1.4.0 <2.0.0",
        "type": "range"
      },
      "/Applications/邓肯21/FE/egg-example/node_modules/egg"
    ]
  ],
  "_cnpm_publish_time": 1496997572297,
  "_from": "egg-multipart@^1.4.0",
  "_hasShrinkwrap": false,
  "_id": "egg-multipart@1.5.0",
  "_location": "/egg-multipart",
  "_nodeVersion": "6.10.2",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/egg-multipart-1.5.0.tgz_1496997572205_0.2655513279605657"
  },
  "_npmUser": {
    "name": "dead_horse",
    "email": "dead_horse@qq.com"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "egg-multipart@^1.4.0",
    "scope": null,
    "escapedName": "egg-multipart",
    "name": "egg-multipart",
    "rawSpec": "^1.4.0",
    "spec": ">=1.4.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/egg"
  ],
  "_resolved": "http://registry.npm.taobao.org/egg-multipart/download/egg-multipart-1.5.0.tgz",
  "_shasum": "2fd15da1dbddb6b9a50509e191df8485e7fcc4e6",
  "_shrinkwrap": null,
  "_spec": "egg-multipart@^1.4.0",
  "_where": "/Applications/邓肯21/FE/egg-example/node_modules/egg",
  "author": {
    "name": "gxcsoccer",
    "email": "gxcsoccer@126.com"
  },
  "bugs": {
    "url": "https://github.com/eggjs/egg-multipart/issues"
  },
  "ci": {
    "version": "6, 8",
    "license": true
  },
  "dependencies": {
    "co": "^4.6.0",
    "co-busboy": "^1.3.1",
    "humanize-bytes": "^1.0.1"
  },
  "description": "multipart plugin for egg",
  "devDependencies": {
    "autod": "^2.8.0",
    "egg": "^1.4.0",
    "egg-bin": "^3.4.2",
    "egg-ci": "^1.7.0",
    "egg-mock": "^3.7.2",
    "eslint": "^3.19.0",
    "eslint-config-egg": "^4.2.0",
    "formstream": "^1.1.0",
    "is-type-of": "^1.0.0",
    "mkdirp": "^0.5.1",
    "mz": "^2.6.0",
    "stream-wormhole": "^1.0.3",
    "supertest": "^3.0.0",
    "urllib": "^2.22.0",
    "webstorm-disable-index": "^1.1.2"
  },
  "directories": {},
  "dist": {
    "shasum": "2fd15da1dbddb6b9a50509e191df8485e7fcc4e6",
    "size": 5192,
    "noattachment": false,
    "tarball": "http://registry.npm.taobao.org/egg-multipart/download/egg-multipart-1.5.0.tgz"
  },
  "eggPlugin": {
    "name": "multipart"
  },
  "engines": {
    "node": ">= 6.0.0"
  },
  "files": [
    "app",
    "config",
    "app.js"
  ],
  "gitHead": "a18a2d78916607e167392ceb8898eae03fe15158",
  "homepage": "https://github.com/eggjs/egg-multipart#readme",
  "keywords": [
    "egg",
    "egg-plugin",
    "eggPlugin",
    "multipart"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "atian25",
      "email": "atian25@qq.com"
    },
    {
      "name": "dead_horse",
      "email": "dead_horse@qq.com"
    },
    {
      "name": "fengmk2",
      "email": "fengmk2@gmail.com"
    },
    {
      "name": "gxcsoccer",
      "email": "gxcsoccer@126.com"
    },
    {
      "name": "popomore",
      "email": "sakura9515@gmail.com"
    }
  ],
  "name": "egg-multipart",
  "optionalDependencies": {},
  "publish_time": 1496997572297,
  "readme": "# egg-multipart\n\n[![NPM version][npm-image]][npm-url]\n[![build status][travis-image]][travis-url]\n[![Test coverage][codecov-image]][codecov-url]\n[![David deps][david-image]][david-url]\n[![Known Vulnerabilities][snyk-image]][snyk-url]\n[![npm download][download-image]][download-url]\n\n[npm-image]: https://img.shields.io/npm/v/egg-multipart.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/egg-multipart\n[travis-image]: https://img.shields.io/travis/eggjs/egg-multipart.svg?style=flat-square\n[travis-url]: https://travis-ci.org/eggjs/egg-multipart\n[codecov-image]: https://codecov.io/github/eggjs/egg-multipart/coverage.svg?branch=master\n[codecov-url]: https://codecov.io/github/eggjs/egg-multipart?branch=master\n[david-image]: https://img.shields.io/david/eggjs/egg-multipart.svg?style=flat-square\n[david-url]: https://david-dm.org/eggjs/egg-multipart\n[snyk-image]: https://snyk.io/test/npm/egg-multipart/badge.svg?style=flat-square\n[snyk-url]: https://snyk.io/test/npm/egg-multipart\n[download-image]: https://img.shields.io/npm/dm/egg-multipart.svg?style=flat-square\n[download-url]: https://npmjs.org/package/egg-multipart\n\nUse [co-busboy](https://github.com/cojs/busboy) to upload file by streaming and process it without save to disk.\n\nJust use `ctx.multipart()` to got file stream, then pass to image processing liberary such as `gm` or upload to cloud storage such as `oss`.\n\n## Whitelist of file extendtions\n\nFor security, if uploading file extendtion is not in white list, will response as `400 Bad request`.\n\nDefault Whitelist:\n\n```js\nconst whitelist = [\n  // images\n  '.jpg', '.jpeg', // image/jpeg\n  '.png', // image/png, image/x-png\n  '.gif', // image/gif\n  '.bmp', // image/bmp\n  '.wbmp', // image/vnd.wap.wbmp\n  '.webp',\n  '.tif',\n  '.psd',\n  // text\n  '.svg',\n  '.js', '.jsx',\n  '.json',\n  '.css', '.less',\n  '.html', '.htm',\n  '.xml',\n  // tar\n  '.zip',\n  '.gz', '.tgz', '.gzip',\n  // video\n  '.mp3',\n  '.mp4',\n  '.avi',\n];\n```\n\n### fileSize\n\nThe default fileSize that multipart can accept is `10mb`. if you upload a large file, you should specify this config.\n\n```js\n// config/config.default.js\nexports.multipart = {\n  fileSize: '50m',\n};\n```\n\n### Custom Config\n\nDeveloper can custom additional file extentions:\n\n```js\n// config/config.default.js\nexports.multipart = {\n  // will append to whilelist\n  fileExtensions: [\n    '.foo',\n    '.apk',\n  ],\n};\n```\n\nCan also **override** built-in whitelist, such as only allow png:\n\n```js\n// config/config.default.js\nexports.multipart = {\n  whitelist: [\n    '.png',\n  ],\n};\n```\n\nOr by function：\n\n```js\nexports.multipart = {\n  whitelist: (filename) => [ '.png' ].includes(path.extname(filename) || '')\n};\n```\n\n**Note: if define `whitelist`, then `fileExtensions` will be ignored.**\n\n## Examples\n\n### Upload File\n\nYou can got upload stream by `ctx.getFileStream*()`.\n\n```html\n<form method=\"POST\" action=\"/upload?_csrf={{ ctx.csrf | safe }}\" enctype=\"multipart/form-data\">\n  title: <input name=\"title\" />\n  file: <input name=\"file\" type=\"file\" />\n  <button type=\"submit\">Upload</button>\n</form>\n```\n\nController which hanlder `POST /upload`:\n\n```js\n// app/controller/upload.js\nconst path = require('path');\nconst sendToWormhole = require('stream-wormhole');\n\nmodule.exports = function* (ctx) {\n  const stream = yield ctx.getFileStream();\n  const name = 'egg-multipart-test/' + path.basename(stream.filename);\n  let result;\n  try {\n    // process file or upload to cloud storage\n    result = yield ctx.oss.put(name, stream);\n  } catch (err) {\n    // must consume the stream, otherwise browser will be stuck.\n    yield sendToWormhole(stream);\n    throw err;\n  }\n\n  ctx.body = {\n    url: result.url,\n    // process form fields by `stream.fields`\n    fields: stream.fields,\n  };\n};\n```\n\n### Upload Multiple Files\n\n```html\n<form method=\"POST\" action=\"/upload?_csrf={{ ctx.csrf | safe }}\" enctype=\"multipart/form-data\">\n  title: <input name=\"title\" />\n  file: <input name=\"file\" type=\"file\" />\n  <button type=\"submit\">Upload</button>\n</form>\n```\n\nController which hanlder `POST /upload`:\n\n```js\n// app/controller/upload.js\nconst sendToWormhole = require('stream-wormhole');\n\nmodule.exports = function* (ctx) {\n  const parts = ctx.multipart();\n  let part;\n  while ((part = yield parts) != null) {\n    if (part.length) {\n      // arrays are busboy fields\n      console.log('field: ' + part[0]);\n      console.log('value: ' + part[1]);\n      console.log('valueTruncated: ' + part[2]);\n      console.log('fieldnameTruncated: ' + part[3]);\n    } else {\n      if (!part.filename) {\n        // user click `upload` before choose a file,\n        // `part` will be file stream, but `part.filename` is empty\n        // must handler this, such as log error.\n        return;\n      }\n      // otherwise, it's a stream\n      console.log('field: ' + part.fieldname);\n      console.log('filename: ' + part.filename);\n      console.log('encoding: ' + part.encoding);\n      console.log('mime: ' + part.mime);\n      let result;\n      try {\n        result = yield ctx.oss.put('egg-multipart-test/' + part.filename, part);\n      } catch (err) {\n        yield sendToWormhole(stream);\n        throw err;\n      }\n      console.log(result);\n    }\n  }\n  console.log('and we are done parsing the form!');\n}\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/eggjs/egg-multipart.git"
  },
  "scripts": {
    "autod": "autod",
    "ci": "egg-bin pkgfiles && npm run lint && npm run cov",
    "cov": "egg-bin cov",
    "lint": "eslint .",
    "pkgfiles": "egg-bin pkgfiles",
    "test": "npm run lint -- --fix && npm run test-local",
    "test-local": "egg-bin test"
  },
  "version": "1.5.0"
}
