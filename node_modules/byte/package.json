{
  "_args": [
    [
      {
        "raw": "byte@^1.1.5",
        "scope": null,
        "escapedName": "byte",
        "name": "byte",
        "rawSpec": "^1.1.5",
        "spec": ">=1.1.5 <2.0.0",
        "type": "range"
      },
      "/Applications/邓肯21/FE/egg-example/node_modules/cluster-client"
    ]
  ],
  "_cnpm_publish_time": 1494490778822,
  "_from": "byte@^1.1.5",
  "_hasShrinkwrap": false,
  "_id": "byte@1.1.6",
  "_location": "/byte",
  "_nodeVersion": "7.10.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/byte-1.1.6.tgz_1494490775301_0.380484924884513"
  },
  "_npmUser": {
    "name": "gxcsoccer",
    "email": "gxcsoccer@126.com"
  },
  "_npmVersion": "4.2.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "byte@^1.1.5",
    "scope": null,
    "escapedName": "byte",
    "name": "byte",
    "rawSpec": "^1.1.5",
    "spec": ">=1.1.5 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/cluster-client"
  ],
  "_resolved": "http://registry.npm.taobao.org/byte/download/byte-1.1.6.tgz",
  "_shasum": "c5f425921ed01e692da931228a240f8bae9644b1",
  "_shrinkwrap": null,
  "_spec": "byte@^1.1.5",
  "_where": "/Applications/邓肯21/FE/egg-example/node_modules/cluster-client",
  "author": {
    "name": "fengmk2",
    "email": "fengmk2@gmail.com",
    "url": "http://fengmk2.com"
  },
  "bugs": {
    "url": "https://github.com/node-modules/byte/issues",
    "email": "fengmk2@gmail.com"
  },
  "contributors": [
    {
      "name": "fengmk2",
      "email": "fengmk2@gmail.com",
      "url": "https://github.com/fengmk2"
    },
    {
      "name": "dead_horse",
      "email": "dead_horse@qq.com"
    },
    {
      "name": "ali-sdk",
      "email": "m@fengmk2.com",
      "url": "https://github.com/ali-sdk"
    },
    {
      "name": "tangyao",
      "email": "tangyao@taobao.com"
    },
    {
      "name": "Minqi Pan",
      "email": "pmq2001@gmail.com",
      "url": "https://github.com/pmq20"
    },
    {
      "name": "Jackson Tian",
      "email": "shyvo1987@gmail.com",
      "url": "https://github.com/JacksonTian"
    },
    {
      "name": "zōng yǔ",
      "email": "gxcsoccer@users.noreply.github.com"
    }
  ],
  "dependencies": {
    "debug": "^2.6.6",
    "long": "^3.2.0",
    "utility": "^1.12.0"
  },
  "description": "Input Buffer and Output Buffer, just like Java ByteBuffer",
  "devDependencies": {
    "autod": "*",
    "beautify-benchmark": "0",
    "benchmark": "1",
    "contributors": "*",
    "istanbul": "*",
    "jshint": "*",
    "mocha": "*",
    "optimized": "^1.2.0"
  },
  "directories": {},
  "dist": {
    "shasum": "c5f425921ed01e692da931228a240f8bae9644b1",
    "size": 8138,
    "noattachment": false,
    "tarball": "http://registry.npm.taobao.org/byte/download/byte-1.1.6.tgz"
  },
  "engines": {
    "node": ">= 0.10.0"
  },
  "files": [
    "lib/"
  ],
  "gitHead": "648867bed4de6e6ffc664bb6cfa14ede7d2d8c6c",
  "homepage": "https://github.com/node-modules/byte",
  "keywords": [
    "ByteBuffer",
    "byte",
    "bytes",
    "io",
    "buffer"
  ],
  "license": "MIT",
  "main": "lib/byte.js",
  "maintainers": [
    {
      "name": "dead-horse",
      "email": "dead_horse@qq.com"
    },
    {
      "name": "dead_horse",
      "email": "dead_horse@qq.com"
    },
    {
      "name": "fengmk2",
      "email": "fengmk2@gmail.com"
    },
    {
      "name": "gxcsoccer",
      "email": "gxcsoccer@126.com"
    },
    {
      "name": "popomore",
      "email": "sakura9515@gmail.com"
    }
  ],
  "name": "byte",
  "optionalDependencies": {},
  "publish_time": 1494490778822,
  "readme": "byte\n=======\n\n[![NPM version][npm-image]][npm-url]\n[![build status][travis-image]][travis-url]\n[![Test coverage][coveralls-image]][coveralls-url]\n[![Gittip][gittip-image]][gittip-url]\n[![David deps][david-image]][david-url]\n[![node version][node-image]][node-url]\n[![npm download][download-image]][download-url]\n\n[npm-image]: https://img.shields.io/npm/v/byte.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/byte\n[travis-image]: https://img.shields.io/travis/node-modules/byte.svg?style=flat-square\n[travis-url]: https://travis-ci.org/node-modules/byte\n[coveralls-image]: https://img.shields.io/coveralls/node-modules/byte.svg?style=flat-square\n[coveralls-url]: https://coveralls.io/r/node-modules/byte?branch=master\n[gittip-image]: https://img.shields.io/gittip/fengmk2.svg?style=flat-square\n[gittip-url]: https://www.gittip.com/fengmk2/\n[david-image]: https://img.shields.io/david/node-modules/byte.svg?style=flat-square\n[david-url]: https://david-dm.org/node-modules/byte\n[node-image]: https://img.shields.io/badge/node.js-%3E=_0.10-green.svg?style=flat-square\n[node-url]: http://nodejs.org/download/\n[download-image]: https://img.shields.io/npm/dm/byte.svg?style=flat-square\n[download-url]: https://npmjs.org/package/byte\n\nInput Buffer and Output Buffer,\njust like Java [`ByteBuffer`](http://docs.oracle.com/javase/6/docs/api/java/nio/ByteBuffer.html).\n\n## Install\n\n```bash\n$ npm install byte --save\n```\n\n## Usage\n\nAll methods just like Java ByteBuffer,\nyou find them out [here](http://docs.oracle.com/javase/6/docs/api/java/nio/ByteBuffer.html#method_summary).\n\n```js\nvar ByteBuffer = require('byte');\n\nvar bb = ByteBuffer.allocate(1024);\nbb.order(ByteBuffer.BIG_ENDIAN); // default is BIG_ENDIAN, you can change it to LITTLE_ENDIAN.\nbb.put(0);\nbb.put(new Buffer([0, 1, 2]));\nbb.put(new Buffer([255, 255, 255, 255]), 10, 3);\nbb.put(21, 100);\n\nbb.putChar('a');\nbb.putChar(10, 'b');\n\nbb.putInt(1024);\nbb.putInt(-100);\n\nbb.putFloat(100.9);\n\nbb.putLong(10000100009099);\nbb.putLong('1152921504606847000');\n\nbb.putShort(65535);\nbb.putShort(-50000);\n\nbb.putDouble(99.99999);\n\n// wrap for read\nvar rb = ByteBuffer.wrap(new Buffer(100));\nrb.getInt();\nrb.getLong();\nrb.getChar();\nrb.get();\nrb.getDouble();\nrb.getFloat();\n```\n\n## Benchmark\n\n```bash\n$ node benchmark/put.js\n\nnode version: v0.11.12, date: Mon May 12 2014 18:25:35 GMT+0800 (CST)\nStarting...\n20 tests completed.\n\nput()                                      x 29,971,599 ops/sec ±4.10% (96 runs sampled)\nputChar(\"a\")                               x 27,950,189 ops/sec ±6.22% (80 runs sampled)\nputChar(61)                                x 34,798,492 ops/sec ±5.08% (81 runs sampled)\nputShort()                                 x 25,264,781 ops/sec ±2.90% (88 runs sampled)\nputInt()                                   x 21,368,588 ops/sec ±6.07% (85 runs sampled)\nputFloat()                                 x 12,324,148 ops/sec ±2.04% (93 runs sampled)\nputDouble()                                x 13,374,686 ops/sec ±1.41% (92 runs sampled)\nputLong(100000)                            x 17,754,878 ops/sec ±5.16% (86 runs sampled)\nputSmallSLong(\"10000\")                     x  7,732,989 ops/sec ±2.07% (92 runs sampled)\nputBigNumLong(34359738368)                 x  3,580,231 ops/sec ±2.58% (93 runs sampled)\nputSafeStrLong(\"34359738368\")              x  2,443,560 ops/sec ±2.04% (97 runs sampled)\nputStrLong(\"9223372036854775808\")          x    760,908 ops/sec ±2.42% (92 runs sampled)\nByteBuffer.allocate(100).putString(0, str) x    608,403 ops/sec ±11.46% (70 runs sampled)\nputString(0, str)                          x  1,362,412 ops/sec ±8.55% (85 runs sampled)\nbytes.putString(str)                       x  1,506,610 ops/sec ±2.31% (94 runs sampled)\nputString(0, buf)                          x  5,947,594 ops/sec ±4.16% (90 runs sampled)\nbytes.putString(buf)                       x  5,741,251 ops/sec ±1.69% (95 runs sampled)\nputRawString(0, str)                       x  2,908,161 ops/sec ±1.81% (95 runs sampled)\nbytes.putRawString(str)                    x  1,527,089 ops/sec ±4.98% (86 runs sampled)\nbytes.putRawString(str).array()            x  1,009,026 ops/sec ±2.38% (91 runs sampled)\n\n$node benchmark/get.js\n\nnode version: v0.11.12, date: Mon May 12 2014 19:14:26 GMT+0800 (CST)\nStarting...\n15 tests completed.\n\nget(0, 1) => copy Buffer    x  2,059,464 ops/sec ±9.18% (69 runs sampled)\nget(0, 100) => copy Buffer  x  2,124,455 ops/sec ±4.98% (75 runs sampled)\nget(0, 4096) => copy Buffer x    356,927 ops/sec ±9.43% (56 runs sampled)\nget() => byte               x 15,477,897 ops/sec ±3.05% (89 runs sampled)\ngetChar(0)                  x 52,541,591 ops/sec ±1.04% (95 runs sampled)\ngetShort(0)                 x 26,297,086 ops/sec ±2.46% (89 runs sampled)\ngetInt(0)                   x 18,772,003 ops/sec ±6.27% (71 runs sampled)\ngetFloat(0)                 x 13,132,298 ops/sec ±1.68% (97 runs sampled)\ngetDouble(0)                x 10,968,594 ops/sec ±1.27% (94 runs sampled)\ngetLong(0)                  x 11,849,374 ops/sec ±2.63% (96 runs sampled)\ngetString(0)                x  2,358,382 ops/sec ±5.78% (76 runs sampled)\ngetCString(0)               x  1,618,356 ops/sec ±8.41% (72 runs sampled)\nreadRawString(4, 100)       x  4,790,991 ops/sec ±9.25% (79 runs sampled)\nreadRawString(100)          x  5,434,663 ops/sec ±1.32% (95 runs sampled)\ngetRawString(0, 100)        x  5,497,325 ops/sec ±1.02% (98 runs sampled)\n```\n\n## `Number` methods\n\n```\nputShort / putInt16\nputUInt16\nputInt / putInt32\nputUInt / putUInt32\nputInt64\nputFloat\nputDouble\n\n\ngetShort / getInt16\ngetUInt16\ngetInt / getInt32\ngetUInt / getUInt32\ngetInt64\ngetFloat\ngetDouble\n```\n\n## `String` methods\n\nJava String format: `| length (4 bytes int) | string bytes |`\n\nC String format: `| length + 1 (4 bytes int) | string bytes | \\0 |`\n\nRow String format: `string bytes`\n\n### `putString()` and `putCString()` and `putRawString()`\n\n```js\nbb.putString('foo');\nbb.putString(new Buffer('foo'));\n\nbb.putCString('foo');\nbb.putCString(new Buffer('foo'));\n\nbb.putRawString('foo');\n```\n\n### `getString()` and `getCString()` and `getRawString(), readRawString()`\n\n```js\nbb.getString();\nbb.getString(10);\n\nbb.getCString();\nbb.getCString(10);\n\nbb.getRawString(0, 10);\nbb.readRawString(10);\n```\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2013 - 2014 fengmk2 &lt;fengmk2@gmail.com&gt; and other contributors\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/node-modules/byte.git",
    "web": "https://github.com/node-modules/byte"
  },
  "scripts": {
    "autod": "autod -w --prefix '^' -e benchmark && npm run cnpm",
    "cnpm": "npm install --registry=https://registry.npm.taobao.org",
    "contributors": "contributors -f plain -o AUTHORS",
    "jshint": "jshint .",
    "optimized": "node --allow-natives-syntax --trace_opt --trace_deopt test/optimized.js",
    "test": "mocha -R spec -t 5000 test/*.test.js",
    "test-cov": "node node_modules/.bin/istanbul cover node_modules/.bin/_mocha -- -t 5000 test/*.test.js",
    "test-travis": "node node_modules/.bin/istanbul cover node_modules/.bin/_mocha --report lcovonly -- -t 5000 test/*.test.js"
  },
  "version": "1.1.6"
}
