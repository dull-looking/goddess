{
  "_args": [
    [
      {
        "raw": "common-bin@^2.4.0",
        "scope": null,
        "escapedName": "common-bin",
        "name": "common-bin",
        "rawSpec": "^2.4.0",
        "spec": ">=2.4.0 <3.0.0",
        "type": "range"
      },
      "/Applications/邓肯21/FE/egg-example/node_modules/egg-bin"
    ]
  ],
  "_cnpm_publish_time": 1496507871308,
  "_from": "common-bin@^2.4.0",
  "_hasShrinkwrap": false,
  "_id": "common-bin@2.4.0",
  "_location": "/common-bin",
  "_nodeVersion": "8.0.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/common-bin-2.4.0.tgz_1496507871174_0.9985235095955431"
  },
  "_npmUser": {
    "name": "fengmk2",
    "email": "fengmk2@gmail.com"
  },
  "_npmVersion": "5.0.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "common-bin@^2.4.0",
    "scope": null,
    "escapedName": "common-bin",
    "name": "common-bin",
    "rawSpec": "^2.4.0",
    "spec": ">=2.4.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/egg-bin"
  ],
  "_resolved": "http://registry.npm.taobao.org/common-bin/download/common-bin-2.4.0.tgz",
  "_shasum": "f587ecb32b8e19fbdb360f1421f150779a4e0bd8",
  "_shrinkwrap": null,
  "_spec": "common-bin@^2.4.0",
  "_where": "/Applications/邓肯21/FE/egg-example/node_modules/egg-bin",
  "author": {
    "name": "fengmk2",
    "email": "fengmk2@gmail.com",
    "url": "https://fengmk2.com"
  },
  "bugs": {
    "url": "https://github.com/node-modules/common-bin/issues"
  },
  "ci": {
    "version": "6, 7, 8",
    "license": {
      "year": "2017",
      "fullname": "node-modules and other contributors"
    }
  },
  "contributors": [
    {
      "name": "fengmk2",
      "email": "fengmk2@gmail.com",
      "url": "https://fengmk2.com"
    },
    {
      "name": "TZ",
      "email": "atian25@qq.com",
      "url": "https://atian25.github.io"
    }
  ],
  "dependencies": {
    "chalk": "^1.1.3",
    "change-case": "^3.0.1",
    "co": "^4.6.0",
    "dargs": "^5.1.0",
    "debug": "^2.6.8",
    "is-type-of": "^1.0.0",
    "yargs": "^8.0.1"
  },
  "description": "Abstraction bin tool",
  "devDependencies": {
    "autod": "^2.8.0",
    "coffee": "^3.3.2",
    "egg-bin": "^3.4.1",
    "egg-ci": "^1.5.0",
    "eslint": "^3.19.0",
    "eslint-config-egg": "^4.2.0",
    "mm": "^2.1.0",
    "rimraf": "^2.6.1",
    "webstorm-disable-index": "^1.1.2"
  },
  "directories": {},
  "dist": {
    "shasum": "f587ecb32b8e19fbdb360f1421f150779a4e0bd8",
    "size": 8954,
    "noattachment": false,
    "tarball": "http://registry.npm.taobao.org/common-bin/download/common-bin-2.4.0.tgz"
  },
  "engines": {
    "node": ">= 6.0.0"
  },
  "files": [
    "lib",
    "index.js"
  ],
  "gitHead": "22b02cd3e4100386a4fd8a94c866078e57a5ea40",
  "homepage": "https://github.com/node-modules/common-bin",
  "main": "index.js",
  "maintainers": [
    {
      "name": "atian25",
      "email": "atian25@qq.com"
    },
    {
      "name": "dead-horse",
      "email": "dead_horse@qq.com"
    },
    {
      "name": "eggjs",
      "email": "fengmk2+eggjs@gmail.com"
    },
    {
      "name": "fengmk2",
      "email": "fengmk2@gmail.com"
    },
    {
      "name": "popomore",
      "email": "sakura9515@gmail.com"
    },
    {
      "name": "shaoshuai0102",
      "email": "shaoshuai0102@gmail.com"
    }
  ],
  "name": "common-bin",
  "optionalDependencies": {},
  "publish_time": 1496507871308,
  "readme": "# common-bin\n\n[![NPM version][npm-image]][npm-url]\n[![build status][travis-image]][travis-url]\n[![Test coverage][codecov-image]][codecov-url]\n[![David deps][david-image]][david-url]\n[![Known Vulnerabilities][snyk-image]][snyk-url]\n[![npm download][download-image]][download-url]\n\n[npm-image]: https://img.shields.io/npm/v/common-bin.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/common-bin\n[travis-image]: https://img.shields.io/travis/node-modules/common-bin.svg?style=flat-square\n[travis-url]: https://travis-ci.org/node-modules/common-bin\n[codecov-image]: https://codecov.io/gh/node-modules/common-bin/branch/master/graph/badge.svg\n[codecov-url]: https://codecov.io/gh/node-modules/common-bin\n[david-image]: https://img.shields.io/david/node-modules/common-bin.svg?style=flat-square\n[david-url]: https://david-dm.org/node-modules/common-bin\n[snyk-image]: https://snyk.io/test/npm/common-bin/badge.svg?style=flat-square\n[snyk-url]: https://snyk.io/test/npm/common-bin\n[download-image]: https://img.shields.io/npm/dm/common-bin.svg?style=flat-square\n[download-url]: https://npmjs.org/package/common-bin\n\nAbstraction bin tool wrap [yargs](http://yargs.js.org/), to provide more convenient usage, support async / generator.\n\n---\n\n## Install\n\n```bash\n$ npm i common-bin --save-dev\n```\n\n## Build a bin tool for your team\n\nYou maybe need a custom xxx-bin to implement more custom features.\n\nNow you can implement a [Command](lib/command.js) sub class to do that.\n\n### Example: Write your own `git` command\n\nThis example will show you how to create a new `my-git` tool.\n\n- Full demo: [my-git](test/fixtures/my-git)\n\n```bash\ntest/fixtures/my-git\n├── bin\n│   └── my-git.js\n├── command\n│   ├── remote\n│   │   ├── add.js\n│   │   └── remove.js\n│   ├── clone.js\n│   └── remote.js\n├── index.js\n└── package.json\n```\n\n#### [my-git.js](test/fixtures/my-git/bin/my-git.js)\n\n```js\n#!/usr/bin/env node\n\n'use strict';\n\nconst Command = require('..');\nnew Command().start();\n```\n\n#### [Main Command](test/fixtures/my-git/index.js)\n\nJust extend `Command`, and use as your bin start point.\n- You can use `this.yargs` to custom yargs config, see http://yargs.js.org/docs for more detail.\n\n```js\nconst Command = require('common-bin');\nconst pkg = require('./package.json');\n\nclass MainCommand extends Command {\n  constructor(rawArgv) {\n    super(rawArgv);\n    this.usage = 'Usage: my-git <command> [options]';\n\n    // load entire command directory\n    this.load(path.join(__dirname, 'command'));\n\n    // or load special command file\n    // this.add(path.join(__dirname, 'test_command.js'));\n\n    // more custom with `yargs` api, such as you can use `my-git -V`\n    this.yargs.alias('V', 'version');\n  }\n}\n\nmodule.exports = MainCommand;\n```\n\n#### [CloneCommand](test/fixtures/my-git/command/clone.js)\n\n```js\nconst Command = require('common-bin');\nclass CloneCommand extends Command {\n  constructor(rawArgv) {\n    super(rawArgv);\n\n    this.options = {\n      depth: {\n        type: 'number',\n        description: 'Create a shallow clone with a history truncated to the specified number of commits',\n      },\n    });\n  }\n\n  * run({ argv }) {\n    console.log('git clone %s to %s with depth %d', argv._[0], argv._[1], argv.depth);\n  }\n\n  get description() {\n    return 'Clone a repository into a new directory';\n  }\n}\n\nmodule.exports = CloneCommand;\n```\n\n#### Run result\n\n```bash\n$ my-git clone gh://node-modules/common-bin dist --depth=1\n\ngit clone gh://node-modules/common-bin to dist with depth 1\n```\n\n## Concept\n\n### Command\n\nDefine the main logic of command\n\n**Method:**\n\n- `start()` - start your program, only use once in your bin file.\n- `run(context)`\n  - should implement this to provide command handler, will exec when not found sub command.\n  - Support generator / async function / normal function which return promise.\n  - `context` is `{ cwd, env, argv, rawArgv }`\n    - `cwd` - `process.cwd()`\n    - `env` - clone env object from `process.env`\n    - `argv` - argv parse result by yargs, `{ _: [ 'start' ], '$0': '/usr/local/bin/common-bin', baseDir: 'simple'}`\n    - `rawArgv` - the raw argv, `[ \"--baseDir=simple\" ]`\n- `load(fullPath)` - register the entire directory to commands\n- `add(name, target)` - register special command with command name, `target` could be full path of file or Class.\n- `alias(alias, name)` - register a command with an existing command\n- `showHelp()` - print usage message to console.\n- `options=` - a setter, shortcut for `yargs.options`\n- `usage=` - a setter, shortcut for `yargs.usage`\n\n**Properties:**\n\n- `description` - {String} a getter, only show this description when it's a sub command in help console\n- `helper` - {Object} helper instance\n- `yargs` - {Object} yargs instance for advanced custom usage\n- `parserOptions` - {Object} control `context` parse rule.\n  - `execArgv` - {Boolean} whether extract `execArgv` to `context.execArgv`\n  - `removeAlias` - {Boolean} whether remove alias key from `argv`\n  - `removeCamelCase` - {Boolean} whether remove camel case key from `argv`\n\nYou can define options using yargs\n\n```js\nthis.yargs.options({\n  baseDir: {\n    alias: 'b',\n    demandOption: true,\n    description: 'the target directory',\n    coerce: str => path.resolve(prcess.cwd(), str),\n  },\n  depth: {\n    description: 'level to clone',\n    type: 'number',\n    default: 1,\n  },\n  size: {\n    description: 'choose a size',\n    choices: ['xs', 's', 'm', 'l', 'xl']\n  },\n});\n```\n\n### Helper\n\n- `forkNode(modulePath, args, opt)` - fork child process, wrap with promise and gracefull exit\n- `spawn(cmd, args, opt)` - spawn a new process, wrap with promise and gracefull exit\n- `npmInstall(npmCli, name, cwd)` - install node modules, wrap with promise\n- `* callFn(fn, args, thisArg)` - call fn, support gernerator / async / normal function return promise\n- `unparseArgv(argv, opts)` - unparse argv and change it to array style\n\n**Extend Helper**\n\n```js\n// index.js\nconst Command = require('common-bin');\nconst helper = require('./helper');\nclass MainCommand extends Command {\n  constructor(rawArgv) {\n    super(rawArgv);\n\n    // load sub command\n    this.load(path.join(__dirname, 'command'));\n\n    // custom helper\n    Object.assign(this.helper, helper);\n  }\n}\n```\n\n## Advanced Usage\n\n### Single Command\n\nJust need to provide `options` and `run()`.\n\n```js\nconst Command = require('common-bin');\nclass MainCommand extends Command {\n  constructor(rawArgv) {\n    super(rawArgv);\n    this.options = {\n      baseDir: {\n        description: 'target directory',\n      },\n    };\n  }\n\n  * run(context) {\n    console.log('run default command at %s', context.argv.baseDir);\n  }\n}\n```\n\n### Sub Command\n\nAlso support sub command such as `my-git remote add <name> <url> --tags`.\n\n```js\n// test/fixtures/my-git/command/remote.js\nclass RemoteCommand extends Command {\n  constructor(rawArgv) {\n    // DO NOT forgot to pass params to super\n    super(rawArgv);\n    // load sub command for directory\n    this.load(path.join(__dirname, 'remote'));\n  }\n\n  * run({ argv }) {\n    console.log('run remote command with %j', argv._);\n  }\n\n  get description() {\n    return 'Manage set of tracked repositories';\n  }\n}\n\n// test/fixtures/my-git/command/remote/add.js\nclass AddCommand extends Command {\n  constructor(rawArgv) {\n    super(rawArgv);\n\n    this.options = {\n      tags: {\n        type: 'boolean',\n        default: false,\n        description: 'imports every tag from the remote repository',\n      },\n    };\n\n  }\n\n  * run({ argv }) {\n    console.log('git remote add %s to %s with tags=%s', argv.name, argv.url, argv.tags);\n  }\n\n  get description() {\n    return 'Adds a remote named <name> for the repository at <url>';\n  }\n}\n```\n\nsee [remote.js](test/fixtures/my-git/command/remote.js) for more detail.\n\n\n### Async Support\n\n```js\nclass SleepCommand extends Command {\n\n  async run() {\n    await sleep('1s');\n    console.log('sleep 1s');\n  }\n\n  get description() {\n    return 'sleep showcase';\n  }\n}\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n```\n\nsee [async-bin](test/fixtures/async-bin) for more detail.\n\n\n### Bash-Completions\n\n```bash\n$ # exec below will print usage for auto bash completion\n$ my-git completion\n$ # exec below will mount auto completion to your bash\n$ my-git completion >> ~/.bashrc\n```\n\n![Bash-Completions](https://cloud.githubusercontent.com/assets/227713/23980327/0a00e1a0-0a3a-11e7-81be-23b4d54d91ad.gif)\n\n\n## Migrating from v1 to v2\n\n### bin\n\n- `run` method is not longer exist.\n\n```js\n// 1.x\nconst run = require('common-bin').run;\nrun(require('../lib/my_program'));\n\n// 2.x\n// require a main Command\nconst Command = require('..');\nnew Command().start();\n```\n\n### Program\n\n- `Program` is just a `Command` sub class, you can call it `Main Command` now.\n- `addCommand()` is replace with `add()`.\n- Recommand to use `load()` to load the whole command directory.\n\n```js\n// 1.x\nthis.addCommand('test', path.join(__dirname, 'test_command.js'));\n\n// 2.x\nconst Command = require('common-bin');\nconst pkg = require('./package.json');\n\nclass MainCommand extends Command {\n  constructor() {\n    super();\n\n    this.add('test', path.join(__dirname, 'test_command.js'));\n    // or load the entire directory\n    this.load(path.join(__dirname, 'command'));\n  }\n}\n```\n\n### Command\n\n- `help()` is not use anymore.\n- should provide `name`, `description`, `options`.\n- `* run()` arguments had change to object, recommand to use destructuring style - `{ cwd, env, argv, rawArgv }`\n  - `argv` is an object parse by `yargs`, **not `args`.**\n  - `rawArgv` is equivalent to old `args`\n\n```js\n// 1.x\nclass TestCommand extends Command {\n  * run(cwd, args) {\n    console.log('run mocha test at %s with %j', cwd, args);\n  }\n}\n\n// 2.x\nclass TestCommand extends Command {\n  constructor() {\n    super();\n    // my-bin test --require=co-mocha\n    this.options = {\n      require: {\n        description: 'require module name',\n      },\n    };\n  }\n\n  * run({ cwd, env, argv, rawArgv }) {\n    console.log('run mocha test at %s with %j', cwd, argv);\n  }\n\n  get description() {\n    return 'unit test';\n  }\n}\n```\n\n### helper\n\n- `getIronNodeBin` is remove.\n- `child.kill` now support signal.\n\n## License\n\n[MIT](LICENSE)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/node-modules/common-bin.git"
  },
  "scripts": {
    "autod": "autod",
    "ci": "npm run clean && npm run lint && egg-bin cov",
    "clean": "rimraf coverage",
    "cov": "egg-bin cov",
    "lint": "eslint .",
    "test": "npm run lint -- --fix && npm run test-local",
    "test-local": "egg-bin test"
  },
  "version": "2.4.0"
}
