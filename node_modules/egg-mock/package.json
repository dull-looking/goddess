{
  "_args": [
    [
      {
        "raw": "egg-mock@^3.7.0",
        "scope": null,
        "escapedName": "egg-mock",
        "name": "egg-mock",
        "rawSpec": "^3.7.0",
        "spec": ">=3.7.0 <4.0.0",
        "type": "range"
      },
      "/Applications/邓肯21/FE/egg-example"
    ]
  ],
  "_cnpm_publish_time": 1496840365785,
  "_from": "egg-mock@^3.7.0",
  "_hasShrinkwrap": false,
  "_id": "egg-mock@3.7.2",
  "_location": "/egg-mock",
  "_nodeVersion": "8.0.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/egg-mock-3.7.2.tgz_1496840365674_0.21151420078240335"
  },
  "_npmUser": {
    "name": "popomore",
    "email": "sakura9515@gmail.com"
  },
  "_npmVersion": "5.0.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "egg-mock@^3.7.0",
    "scope": null,
    "escapedName": "egg-mock",
    "name": "egg-mock",
    "rawSpec": "^3.7.0",
    "spec": ">=3.7.0 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "http://registry.npm.taobao.org/egg-mock/download/egg-mock-3.7.2.tgz",
  "_shasum": "86bdba686e63da81c11048219eb8dc764f0477c3",
  "_shrinkwrap": null,
  "_spec": "egg-mock@^3.7.0",
  "_where": "/Applications/邓肯21/FE/egg-example",
  "author": {
    "name": "popomore",
    "email": "sakura9515@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/eggjs/egg/issues"
  },
  "ci": {
    "version": "6, 7"
  },
  "dependencies": {
    "await-event": "^2.1.0",
    "co": "^4.6.0",
    "coffee": "^3.3.2",
    "debug": "^2.6.8",
    "detect-port": "^1.1.3",
    "egg-utils": "^2.1.0",
    "get-ready": "^2.0.1",
    "globby": "^6.1.0",
    "is-type-of": "^1.0.0",
    "ko-sleep": "^1.0.3",
    "merge-descriptors": "^1.0.1",
    "mm": "^2.1.0",
    "rimraf": "^2.6.1",
    "supertest": "^3.0.0",
    "urllib": "^2.22.0"
  },
  "description": "mock server for egg",
  "devDependencies": {
    "@types/node": "^7.0.18",
    "autod": "^2.8.0",
    "egg": "^1.4.0",
    "egg-bin": "^3.4.0",
    "egg-ci": "^1.6.0",
    "eslint": "^3.19.0",
    "eslint-config-egg": "^4.2.0",
    "mkdirp": "^0.5.1",
    "mz-modules": "^1.0.0",
    "pedding": "^1.1.0",
    "sdk-base": "^3.0.1",
    "ts-node": "^3.0.4",
    "typescript": "^2.3.2"
  },
  "directories": {},
  "dist": {
    "shasum": "86bdba686e63da81c11048219eb8dc764f0477c3",
    "size": 14181,
    "noattachment": false,
    "tarball": "http://registry.npm.taobao.org/egg-mock/download/egg-mock-3.7.2.tgz"
  },
  "eggPlugin": {
    "name": "egg-mock"
  },
  "engines": {
    "node": ">= 6.0.0"
  },
  "files": [
    "app.js",
    "index.js",
    "index.d.ts",
    "app",
    "lib"
  ],
  "gitHead": "3ab5641d84aa1611ef08a17259399299deb4505a",
  "homepage": "https://github.com/eggjs/egg-mock",
  "keywords": [
    "egg",
    "mock"
  ],
  "main": "index.js",
  "maintainers": [
    {
      "name": "atian25",
      "email": "atian25@qq.com"
    },
    {
      "name": "dead_horse",
      "email": "dead_horse@qq.com"
    },
    {
      "name": "fengmk2",
      "email": "fengmk2@gmail.com"
    },
    {
      "name": "popomore",
      "email": "sakura9515@gmail.com"
    },
    {
      "name": "shaoshuai0102",
      "email": "shaoshuai0102@gmail.com"
    }
  ],
  "name": "egg-mock",
  "optionalDependencies": {},
  "publish_time": 1496840365785,
  "readme": "# egg-mock\n\n[![NPM version][npm-image]][npm-url]\n[![build status][travis-image]][travis-url]\n[![Test coverage][codecov-image]][codecov-url]\n[![David deps][david-image]][david-url]\n[![Known Vulnerabilities][snyk-image]][snyk-url]\n[![npm download][download-image]][download-url]\n\n[npm-image]: https://img.shields.io/npm/v/egg-mock.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/egg-mock\n[travis-image]: https://img.shields.io/travis/eggjs/egg-mock.svg?style=flat-square\n[travis-url]: https://travis-ci.org/eggjs/egg-mock\n[codecov-image]: https://codecov.io/github/eggjs/egg-mock/coverage.svg?branch=master\n[codecov-url]: https://codecov.io/github/eggjs/egg-mock?branch=master\n[david-image]: https://img.shields.io/david/eggjs/egg-mock.svg?style=flat-square\n[david-url]: https://david-dm.org/eggjs/egg-mock\n[snyk-image]: https://snyk.io/test/npm/egg-mock/badge.svg?style=flat-square\n[snyk-url]: https://snyk.io/test/npm/egg-mock\n[download-image]: https://img.shields.io/npm/dm/egg-mock.svg?style=flat-square\n[download-url]: https://npmjs.org/package/egg-mock\n\nMock library for testing Egg applications, plugins and custom Egg frameworks with ease. `egg-mock` inherits all APIs from [node_modules/mm](https://github.com/node-modules/mm), offering more flexibility.\n\n## Install\n\n```bash\n$ npm i egg-mock --save-dev\n```\n\n## Usage\n\n### Create testcase\n\nLaunch a mock server with `mm.app`\n\n```js\n// test/index.test.js\nconst path = require('path');\nconst mm = require('egg-mock');\n\ndescribe('some test', () => {\n  let app;\n  before(() => {\n    app = mm.app({\n      baseDir: 'apps/foo'\n    });\n    return app.ready();\n  })\n  after(() => app.close());\n\n  it('should request /', () => {\n    return app.httpRequest()\n      .get('/')\n      .expect(200);\n  });\n});\n```\n\nRetrieve Agent instance through `app.agent` after `mm.app` started.\n\nUsing `mm.cluster` launch cluster server, you can use the same API as `mm.app`;\n\n### Test Application\n\n`baseDir` is optional that is `process.cwd()` by default.\n\n```js\nbefore(() => {\n  app = mm.app();\n  return app.ready();\n});\n```\n\n### Test Framework\n\nframework is optional, it's `node_modules/egg` by default.\n\n```js\nbefore(() => {\n  app = mm.app({\n    baseDir: 'apps/demo',\n    framework: true,\n  });\n  return app.ready();\n});\n```\n\n### Test Plugin\n\nIf `eggPlugin.name` is defined in `package.json`, it's a plugin that will be loaded to plugin list automatically.\n\n```js\nbefore(() => {\n  app = mm.app({\n    baseDir: 'apps/demo',\n  });\n  return app.ready();\n});\n```\n\nYou can also test the plugin in different framework, e.g. test [aliyun-egg](https://github.com/eggjs/aliyun-egg) and framework-b in one plugin.\n\n```js\ndescribe('aliyun-egg', () => {\n  let app;\n  before(() => {\n    app = mm.app({\n      baseDir: 'apps/demo',\n      framework: path.join(__dirname, 'node_modules/aliyun-egg'),\n    });\n    return app.ready();\n  });\n});\n\ndescribe('framework-b', () => {\n  let app;\n  before(() => {\n    app = mm.app({\n      baseDir: 'apps/demo',\n      framework: path.join(__dirname, 'node_modules/framework-b'),\n    });\n    return app.ready();\n  });\n});\n```\n\nIf it's detected as an plugin, but you don't want it to be, you can use `plugin = false`.\n\n```js\nbefore(() => {\n  app = mm.app({\n    baseDir: 'apps/demo',\n    plugin: false,\n  });\n  return app.ready();\n});\n```\n\n## API\n\n### mm.app(options)\n\nCreate a mock application.\n\n### mm.cluster(options)\n\nCreate a mock cluster server, but you can't use API in application, you should test using `supertest`.\n\n```js\nconst mm = require('egg-mock');\ndescribe('test/app.js', () => {\n  let app, config;\n  before(() => {\n    app = mm.cluster();\n    return app.ready();\n  });\n  after(() => app.close());\n\n  it('some test', () => {\n    return app.httpRequest()\n      .get('/config')\n      .expect(200)\n  });\n});\n```\n\nYou can disable coverage, because it's slow.\n\n```js\nmm.cluster({\n  coverage: false,\n});\n```\n\n### mm.env(env)\n\nMock env when starting\n\n```js\n// production environment\nmm.env('prod');\nmm.app({\n  cache: false,\n});\n```\n\nEnvironment list https://github.com/eggjs/egg-core/blob/master/lib/loader/egg_loader.js#L82\n\n### mm.consoleLevel(level)\n\nMock level that print to stdout/stderr\n\n```js\n// 不输出到终端\nmm.consoleLevel('NONE');\n```\n\nlevel list: `DEBUG`, `INFO`, `WARN`, `ERROR`, `NONE`\n\n### mm.home(homePath)\n\nmock home directory\n\n### mm.restore()\n\nrestore all mock data, e.g. `afterEach(mm.restore)`\n\n### options\n\nOptions for `mm.app` and `mm.cluster`\n\n#### baseDir {String}\n\nThe directory of application, default is `process.cwd()`.\n\n```js\nmm.app({\n  baseDir: path.join(__dirname, 'fixtures/apps/demo'),\n})\n```\n\nYou can use a string based on `$CWD/test/fixtures` for short\n\n```js\nmm.app({\n  baseDir: 'apps/demo',\n})\n```\n\n#### framework {String/Boolean}\n\nThe directory of framework\n\n```js\nmm.app({\n  baseDir: 'apps/demo',\n  framework: path.join(__dirname, 'fixtures/egg'),\n})\n```\n\nIt can be true when test an framework\n\n#### plugin\n\nThe directory of plugin, it's detected automatically.\n\n```js\nmm.app({\n  baseDir: 'apps/demo',\n})\n```\n\n#### plugins {Object}\n\nDefine a list of plugins\n\n#### cache {Boolean}\n\nDetermine whether enable cache. it's cached by baseDir.\n\n#### clean {Boolean}\n\nClean all logs directory, default is true.\n\nIf you are using `ava`, disable it.\n\n### app.httpRequest()\n\nRequest current app http server.\n\n```js\nit('should work', () => {\n  return app.httpRequest()\n    .get('/')\n    .expect('hello world')\n    .expect(200);\n});\n```\n\nSee [supertest](https://github.com/visionmedia/supertest) to get more APIs.\n\n### app.mockContext(options)\n\n```js\nconst ctx = app.mockContext({\n  user: {\n    name: 'Jason'\n  }\n});\nconsole.log(ctx.user.name); // Jason\n```\n\n### app.mockCookies(data)\n\n```js\napp.mockCookies({\n  foo: 'bar'\n});\nconst ctx = app.mockContext();\nconsole.log(ctx.getCookie('foo'));\n```\n\n### app.mockHeaders(data)\n\nMock request header\n\n### app.mockSession(data)\n\n```js\napp.mockSession({\n  foo: 'bar'\n});\nconst ctx = app.mockContext();\nconsole.log(ctx.session.foo);\n```\n\n\n### app.mockService(service, methodName, fn)\n\n```js\nit('should mock user name', function* () {\n  app.mockService('user', 'getName', function* (ctx, methodName, args) {\n    return 'popomore';\n  });\n  const ctx = app.mockContext();  \n  yield ctx.service.user.getName();\n});\n```\n\n### app.mockServiceError(service, methodName, error)\n\nYou can mock an error for service\n\n```js\napp.mockServiceError('user', 'home', new Error('mock error'));\n```\n\n### app.mockCsrf();\n\n```js\napp.mockCsrf();\n\nreturn app.httpRequest()\n  .post('/login')\n  .expect(302);\n```\n\n### app.mockHttpclient(url, method, data)\n\nMock httpclient request, e.g.: `ctx.curl`\n\n```js\napp.get('/', function*() {\n  const ret = yield this.curl('https://eggjs.org');\n  this.body = ret.data.toString();\n});\n\napp.mockHttpclient('https://eggjs.org', {\n  // can be buffer / string / json，\n  // will auto convert to buffer\n  // follow options.dataType to convert\n  data: 'mock egg',\n});\n// app.mockHttpclient('https://eggjs.org', 'get', mockResponse); // mock get\n// app.mockHttpclient('https://eggjs.org', [ 'get' , 'head' ], mockResponse); // mock get and head\n// app.mockHttpclient('https://eggjs.org', '*', mockResponse); // mock all methods\n// app.mockHttpclient('https://eggjs.org', mockResponse); // mock all methods by default\n\nreturn app.httpRequest()\n  .post('/')\n  .expect('mock egg');\n```\n\n## Questions & Suggestions\n\nPlease open an issue [here](https://github.com/eggjs/egg/issues).\n\n## License\n\n[MIT](LICENSE)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/eggjs/egg-mock.git"
  },
  "scripts": {
    "autod": "autod",
    "autod-china": "autod --registry=https://registry.npm.taobao.org",
    "ci": "npm run lint && npm run cov && npm run test-ts",
    "contributors": "ali-contributors",
    "cov": "egg-bin cov",
    "lint": "eslint lib app index.js test/*.test.js",
    "test": "npm run lint && npm run test-local && npm run test-ts",
    "test-local": "egg-bin test",
    "test-ts": "ts-node test/index.test.ts"
  },
  "version": "3.7.2"
}
